/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MultihashStruct = {
  hash: BytesLike;
  hashFunction: BigNumberish;
  size: BigNumberish;
};

export type MultihashStructOutput = [string, number, number] & {
  hash: string;
  hashFunction: number;
  size: number;
};

export declare namespace BatchCreate {
  export type CreateClaimParamsStruct = {
    description: string;
    tokenURI: string;
    creditor: string;
    debtor: string;
    claimAmount: BigNumberish;
    dueBy: BigNumberish;
    claimToken: string;
    tag: BytesLike;
    attachment: MultihashStruct;
  };

  export type CreateClaimParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    MultihashStructOutput
  ] & {
    description: string;
    tokenURI: string;
    creditor: string;
    debtor: string;
    claimAmount: BigNumber;
    dueBy: BigNumber;
    claimToken: string;
    tag: string;
    attachment: MultihashStructOutput;
  };
}

export interface BatchCreateInterface extends utils.Interface {
  contractName: "BatchCreate";
  functions: {
    "ERC712_VERSION()": FunctionFragment;
    "batchCreate((string,string,address,address,uint256,uint256,address,bytes32,(bytes32,uint8,uint8))[])": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getDomainSeperator()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "lucidBudgeteer()": FunctionFragment;
    "lucidTxERC721()": FunctionFragment;
    "maxOperations()": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMaxOperations(uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchCreate",
    values: [BatchCreate.CreateClaimParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeperator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lucidBudgeteer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lucidTxERC721",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxOperations",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lucidBudgeteer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lucidTxERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxOperations",
    data: BytesLike
  ): Result;

  events: {
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
}

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface BatchCreate extends BaseContract {
  contractName: "BatchCreate";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchCreateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<[string]>;

    batchCreate(
      claims: BatchCreate.CreateClaimParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeperator(overrides?: CallOverrides): Promise<[string]>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    lucidBudgeteer(overrides?: CallOverrides): Promise<[string]>;

    lucidTxERC721(overrides?: CallOverrides): Promise<[string]>;

    maxOperations(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxOperations(
      _maxOperations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

  batchCreate(
    claims: BatchCreate.CreateClaimParamsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeperator(overrides?: CallOverrides): Promise<string>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  lucidBudgeteer(overrides?: CallOverrides): Promise<string>;

  lucidTxERC721(overrides?: CallOverrides): Promise<string>;

  maxOperations(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxOperations(
    _maxOperations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

    batchCreate(
      claims: BatchCreate.CreateClaimParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<string>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lucidBudgeteer(overrides?: CallOverrides): Promise<string>;

    lucidTxERC721(overrides?: CallOverrides): Promise<string>;

    maxOperations(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxOperations(
      _maxOperations: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
  };

  estimateGas: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    batchCreate(
      claims: BatchCreate.CreateClaimParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lucidBudgeteer(overrides?: CallOverrides): Promise<BigNumber>;

    lucidTxERC721(overrides?: CallOverrides): Promise<BigNumber>;

    maxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxOperations(
      _maxOperations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchCreate(
      claims: BatchCreate.CreateClaimParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainSeperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lucidBudgeteer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lucidTxERC721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxOperations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxOperations(
      _maxOperations: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
