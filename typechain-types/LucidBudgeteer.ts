/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MultihashStruct = {
  hash: BytesLike;
  hashFunction: BigNumberish;
  size: BigNumberish;
};

export type MultihashStructOutput = [string, number, number] & {
  hash: string;
  hashFunction: number;
  size: number;
};

export declare namespace LucidBudgeteer {
  export type ClaimParamsStruct = {
    claimAmount: BigNumberish;
    creditor: string;
    debtor: string;
    description: string;
    dueBy: BigNumberish;
    claimToken: string;
    attachment: MultihashStruct;
  };

  export type ClaimParamsStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    string,
    MultihashStructOutput
  ] & {
    claimAmount: BigNumber;
    creditor: string;
    debtor: string;
    description: string;
    dueBy: BigNumber;
    claimToken: string;
    attachment: MultihashStructOutput;
  };
}

export interface LucidBudgeteerInterface extends utils.Interface {
  contractName: "LucidBudgeteer";
  functions: {
    "ERC712_VERSION()": FunctionFragment;
    "createLucidTx((uint256,address,address,string,uint256,address,(bytes32,uint8,uint8)),bytes32,string)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getDomainSeperator()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "lucidTxERC721()": FunctionFragment;
    "updateLucidTag(uint256,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLucidTx",
    values: [LucidBudgeteer.ClaimParamsStruct, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeperator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lucidTxERC721",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLucidTag",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLucidTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lucidTxERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLucidTag",
    data: BytesLike
  ): Result;

  events: {
    "LucidBudgeteerCreated(address,address,address,uint256)": EventFragment;
    "LucidTagUpdated(address,uint256,address,bytes32,uint256)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LucidBudgeteerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LucidTagUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
}

export type LucidBudgeteerCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    lucidManager: string;
    lucidTxERC721: string;
    lucidBudgeteer: string;
    blocktime: BigNumber;
  }
>;

export type LucidBudgeteerCreatedEventFilter =
  TypedEventFilter<LucidBudgeteerCreatedEvent>;

export type LucidTagUpdatedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  {
    lucidManager: string;
    tokenId: BigNumber;
    updatedBy: string;
    tag: string;
    blocktime: BigNumber;
  }
>;

export type LucidTagUpdatedEventFilter = TypedEventFilter<LucidTagUpdatedEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface LucidBudgeteer extends BaseContract {
  contractName: "LucidBudgeteer";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LucidBudgeteerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<[string]>;

    createLucidTx(
      claim: LucidBudgeteer.ClaimParamsStruct,
      lucidTag: BytesLike,
      _tokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeperator(overrides?: CallOverrides): Promise<[string]>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    lucidTxERC721(overrides?: CallOverrides): Promise<[string]>;

    updateLucidTag(
      tokenId: BigNumberish,
      newTag: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

  createLucidTx(
    claim: LucidBudgeteer.ClaimParamsStruct,
    lucidTag: BytesLike,
    _tokenUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeperator(overrides?: CallOverrides): Promise<string>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  lucidTxERC721(overrides?: CallOverrides): Promise<string>;

  updateLucidTag(
    tokenId: BigNumberish,
    newTag: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

    createLucidTx(
      claim: LucidBudgeteer.ClaimParamsStruct,
      lucidTag: BytesLike,
      _tokenUri: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<string>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lucidTxERC721(overrides?: CallOverrides): Promise<string>;

    updateLucidTag(
      tokenId: BigNumberish,
      newTag: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LucidBudgeteerCreated(address,address,address,uint256)"(
      lucidManager?: string | null,
      lucidTxERC721?: string | null,
      lucidBudgeteer?: null,
      blocktime?: null
    ): LucidBudgeteerCreatedEventFilter;
    LucidBudgeteerCreated(
      lucidManager?: string | null,
      lucidTxERC721?: string | null,
      lucidBudgeteer?: null,
      blocktime?: null
    ): LucidBudgeteerCreatedEventFilter;

    "LucidTagUpdated(address,uint256,address,bytes32,uint256)"(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      updatedBy?: string | null,
      tag?: null,
      blocktime?: null
    ): LucidTagUpdatedEventFilter;
    LucidTagUpdated(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      updatedBy?: string | null,
      tag?: null,
      blocktime?: null
    ): LucidTagUpdatedEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
  };

  estimateGas: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    createLucidTx(
      claim: LucidBudgeteer.ClaimParamsStruct,
      lucidTag: BytesLike,
      _tokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    lucidTxERC721(overrides?: CallOverrides): Promise<BigNumber>;

    updateLucidTag(
      tokenId: BigNumberish,
      newTag: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createLucidTx(
      claim: LucidBudgeteer.ClaimParamsStruct,
      lucidTag: BytesLike,
      _tokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainSeperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lucidTxERC721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateLucidTag(
      tokenId: BigNumberish,
      newTag: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
