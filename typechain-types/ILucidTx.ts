/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MultihashStruct = {
  hash: BytesLike;
  hashFunction: BigNumberish;
  size: BigNumberish;
};

export type MultihashStructOutput = [string, number, number] & {
  hash: string;
  hashFunction: number;
  size: number;
};

export type ClaimStruct = {
  claimAmount: BigNumberish;
  paidAmount: BigNumberish;
  status: BigNumberish;
  dueBy: BigNumberish;
  debtor: string;
  claimToken: string;
  attachment: MultihashStruct;
};

export type ClaimStructOutput = [
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  string,
  string,
  MultihashStructOutput
] & {
  claimAmount: BigNumber;
  paidAmount: BigNumber;
  status: number;
  dueBy: BigNumber;
  debtor: string;
  claimToken: string;
  attachment: MultihashStructOutput;
};

export interface ILucidTxInterface extends utils.Interface {
  contractName: "ILucidTx";
  functions: {
    "createClaim(address,address,string,uint256,uint256,address,(bytes32,uint8,uint8))": FunctionFragment;
    "createClaimWithURI(address,address,string,uint256,uint256,address,(bytes32,uint8,uint8),string)": FunctionFragment;
    "getClaim(uint256)": FunctionFragment;
    "lucidManager()": FunctionFragment;
    "payClaim(uint256,uint256)": FunctionFragment;
    "rejectClaim(uint256)": FunctionFragment;
    "rescindClaim(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createClaim",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      MultihashStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaimWithURI",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      MultihashStruct,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lucidManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payClaim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rescindClaim",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaimWithURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lucidManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescindClaim",
    data: BytesLike
  ): Result;

  events: {
    "ClaimCreated(address,uint256,address,address,address,address,string,tuple,uint256)": EventFragment;
    "ClaimPayment(address,uint256,address,address,address,uint256,uint256)": EventFragment;
    "ClaimRejected(address,uint256,uint256)": EventFragment;
    "ClaimRescinded(address,uint256,uint256)": EventFragment;
    "FeePaid(address,uint256,address,uint256,uint256,uint256)": EventFragment;
    "LucidManagerSet(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRescinded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LucidManagerSet"): EventFragment;
}

export type ClaimCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    ClaimStructOutput,
    BigNumber
  ],
  {
    lucidManager: string;
    tokenId: BigNumber;
    parent: string;
    creditor: string;
    debtor: string;
    origin: string;
    description: string;
    claim: ClaimStructOutput;
    blocktime: BigNumber;
  }
>;

export type ClaimCreatedEventFilter = TypedEventFilter<ClaimCreatedEvent>;

export type ClaimPaymentEvent = TypedEvent<
  [string, BigNumber, string, string, string, BigNumber, BigNumber],
  {
    lucidManager: string;
    tokenId: BigNumber;
    debtor: string;
    paidBy: string;
    paidByOrigin: string;
    paymentAmount: BigNumber;
    blocktime: BigNumber;
  }
>;

export type ClaimPaymentEventFilter = TypedEventFilter<ClaimPaymentEvent>;

export type ClaimRejectedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { lucidManager: string; tokenId: BigNumber; blocktime: BigNumber }
>;

export type ClaimRejectedEventFilter = TypedEventFilter<ClaimRejectedEvent>;

export type ClaimRescindedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { lucidManager: string; tokenId: BigNumber; blocktime: BigNumber }
>;

export type ClaimRescindedEventFilter = TypedEventFilter<ClaimRescindedEvent>;

export type FeePaidEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    lucidManager: string;
    tokenId: BigNumber;
    collectionAddress: string;
    paymentAmount: BigNumber;
    transactionFee: BigNumber;
    blocktime: BigNumber;
  }
>;

export type FeePaidEventFilter = TypedEventFilter<FeePaidEvent>;

export type LucidManagerSetEvent = TypedEvent<
  [string, string, BigNumber],
  { prevLucidManager: string; newLucidManager: string; blocktime: BigNumber }
>;

export type LucidManagerSetEventFilter = TypedEventFilter<LucidManagerSetEvent>;

export interface ILucidTx extends BaseContract {
  contractName: "ILucidTx";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILucidTxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createClaim(
      creditor: string,
      debtor: string,
      description: string,
      claimAmount: BigNumberish,
      dueBy: BigNumberish,
      claimToken: string,
      attachment: MultihashStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createClaimWithURI(
      creditor: string,
      debtor: string,
      description: string,
      claimAmount: BigNumberish,
      dueBy: BigNumberish,
      claimToken: string,
      attachment: MultihashStruct,
      _tokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClaim(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ClaimStructOutput]>;

    lucidManager(overrides?: CallOverrides): Promise<[string]>;

    payClaim(
      tokenId: BigNumberish,
      paymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rejectClaim(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescindClaim(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createClaim(
    creditor: string,
    debtor: string,
    description: string,
    claimAmount: BigNumberish,
    dueBy: BigNumberish,
    claimToken: string,
    attachment: MultihashStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createClaimWithURI(
    creditor: string,
    debtor: string,
    description: string,
    claimAmount: BigNumberish,
    dueBy: BigNumberish,
    claimToken: string,
    attachment: MultihashStruct,
    _tokenUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClaim(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ClaimStructOutput>;

  lucidManager(overrides?: CallOverrides): Promise<string>;

  payClaim(
    tokenId: BigNumberish,
    paymentAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rejectClaim(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescindClaim(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createClaim(
      creditor: string,
      debtor: string,
      description: string,
      claimAmount: BigNumberish,
      dueBy: BigNumberish,
      claimToken: string,
      attachment: MultihashStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createClaimWithURI(
      creditor: string,
      debtor: string,
      description: string,
      claimAmount: BigNumberish,
      dueBy: BigNumberish,
      claimToken: string,
      attachment: MultihashStruct,
      _tokenUri: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaim(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ClaimStructOutput>;

    lucidManager(overrides?: CallOverrides): Promise<string>;

    payClaim(
      tokenId: BigNumberish,
      paymentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectClaim(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rescindClaim(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimCreated(address,uint256,address,address,address,address,string,tuple,uint256)"(
      lucidManager?: null,
      tokenId?: BigNumberish | null,
      parent?: null,
      creditor?: string | null,
      debtor?: string | null,
      origin?: null,
      description?: null,
      claim?: null,
      blocktime?: null
    ): ClaimCreatedEventFilter;
    ClaimCreated(
      lucidManager?: null,
      tokenId?: BigNumberish | null,
      parent?: null,
      creditor?: string | null,
      debtor?: string | null,
      origin?: null,
      description?: null,
      claim?: null,
      blocktime?: null
    ): ClaimCreatedEventFilter;

    "ClaimPayment(address,uint256,address,address,address,uint256,uint256)"(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      debtor?: string | null,
      paidBy?: null,
      paidByOrigin?: null,
      paymentAmount?: null,
      blocktime?: null
    ): ClaimPaymentEventFilter;
    ClaimPayment(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      debtor?: string | null,
      paidBy?: null,
      paidByOrigin?: null,
      paymentAmount?: null,
      blocktime?: null
    ): ClaimPaymentEventFilter;

    "ClaimRejected(address,uint256,uint256)"(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      blocktime?: null
    ): ClaimRejectedEventFilter;
    ClaimRejected(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      blocktime?: null
    ): ClaimRejectedEventFilter;

    "ClaimRescinded(address,uint256,uint256)"(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      blocktime?: null
    ): ClaimRescindedEventFilter;
    ClaimRescinded(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      blocktime?: null
    ): ClaimRescindedEventFilter;

    "FeePaid(address,uint256,address,uint256,uint256,uint256)"(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      collectionAddress?: string | null,
      paymentAmount?: null,
      transactionFee?: null,
      blocktime?: null
    ): FeePaidEventFilter;
    FeePaid(
      lucidManager?: string | null,
      tokenId?: BigNumberish | null,
      collectionAddress?: string | null,
      paymentAmount?: null,
      transactionFee?: null,
      blocktime?: null
    ): FeePaidEventFilter;

    "LucidManagerSet(address,address,uint256)"(
      prevLucidManager?: string | null,
      newLucidManager?: string | null,
      blocktime?: null
    ): LucidManagerSetEventFilter;
    LucidManagerSet(
      prevLucidManager?: string | null,
      newLucidManager?: string | null,
      blocktime?: null
    ): LucidManagerSetEventFilter;
  };

  estimateGas: {
    createClaim(
      creditor: string,
      debtor: string,
      description: string,
      claimAmount: BigNumberish,
      dueBy: BigNumberish,
      claimToken: string,
      attachment: MultihashStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createClaimWithURI(
      creditor: string,
      debtor: string,
      description: string,
      claimAmount: BigNumberish,
      dueBy: BigNumberish,
      claimToken: string,
      attachment: MultihashStruct,
      _tokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClaim(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lucidManager(overrides?: CallOverrides): Promise<BigNumber>;

    payClaim(
      tokenId: BigNumberish,
      paymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rejectClaim(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescindClaim(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createClaim(
      creditor: string,
      debtor: string,
      description: string,
      claimAmount: BigNumberish,
      dueBy: BigNumberish,
      claimToken: string,
      attachment: MultihashStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createClaimWithURI(
      creditor: string,
      debtor: string,
      description: string,
      claimAmount: BigNumberish,
      dueBy: BigNumberish,
      claimToken: string,
      attachment: MultihashStruct,
      _tokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClaim(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lucidManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payClaim(
      tokenId: BigNumberish,
      paymentAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rejectClaim(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescindClaim(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
