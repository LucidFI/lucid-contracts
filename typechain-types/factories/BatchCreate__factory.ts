/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BatchCreate, BatchCreateInterface } from "../BatchCreate";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lucidBudgeteer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_lucidTx",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_maxOperations",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BatchFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "BatchTooLarge",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroLength",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "string",
            name: "tokenURI",
            type: "string",
          },
          {
            internalType: "address",
            name: "creditor",
            type: "address",
          },
          {
            internalType: "address",
            name: "debtor",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "claimAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dueBy",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "claimToken",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "tag",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "hashFunction",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "size",
                type: "uint8",
              },
            ],
            internalType: "struct Multihash",
            name: "attachment",
            type: "tuple",
          },
        ],
        internalType: "struct BatchCreate.CreateClaimParams[]",
        name: "claims",
        type: "tuple[]",
      },
    ],
    name: "batchCreate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lucidBudgeteer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lucidTxERC721",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxOperations",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_maxOperations",
        type: "uint8",
      },
    ],
    name: "updateMaxOperations",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200115b3803806200115b83398181016040528101906200003791906200014b565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160146101000a81548160ff021916908360ff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000221565b6000815190506200012e81620001ed565b92915050565b600081519050620001458162000207565b92915050565b600080600060608486031215620001675762000166620001e8565b5b600062000177868287016200011d565b93505060206200018a868287016200011d565b92505060406200019d8682870162000134565b9150509250925092565b6000620001b482620001bb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b600080fd5b620001f881620001a7565b81146200020457600080fd5b50565b6200021281620001db565b81146200021e57600080fd5b50565b610f2a80620002316000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638cec54911161005b5780638cec5491146100da5780638da5cb5b146100f65780639028dd3e14610114578063f2fde38b146101325761007d565b80630bd4424c146100825780633f3269a3146100a05780636ba0d52d146100be575b600080fd5b61008a61014e565b6040516100979190610bc6565b60405180910390f35b6100a8610161565b6040516100b59190610b64565b60405180910390f35b6100d860048036038101906100d39190610941565b610185565b005b6100f460048036038101906100ef91906108c7565b61022a565b005b6100fe61068a565b60405161010b9190610b64565b60405180910390f35b61011c6106b0565b6040516101299190610b64565b60405180910390f35b61014c6004803603810190610147919061089a565b6106d6565b005b600160149054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020c576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160146101000a81548160ff021916908360ff16021790555050565b81819050600160149054906101000a900460ff1660ff1681111561027a576040517f0b7d62e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008114156102b5576040517fbf55749700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83839050811015610684576000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e94a057260e01b6040518060e0016040528088888781811061032457610323610e13565b5b90506020028101906103369190610c44565b60800135815260200188888781811061035257610351610e13565b5b90506020028101906103649190610c44565b6040016020810190610376919061089a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018888878181106103a4576103a3610e13565b5b90506020028101906103b69190610c44565b60600160208101906103c8919061089a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018888878181106103f6576103f5610e13565b5b90506020028101906104089190610c44565b80600001906104179190610be1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200188888781811061047257610471610e13565b5b90506020028101906104849190610c44565b60a0013581526020018888878181106104a05761049f610e13565b5b90506020028101906104b29190610c44565b60c00160208101906104c4919061089a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018888878181106104f2576104f1610e13565b5b90506020028101906105049190610c44565b610100018036038101906105189190610914565b81525087878681811061052e5761052d610e13565b5b90506020028101906105409190610c44565b60e0013588888781811061055757610556610e13565b5b90506020028101906105699190610c44565b80602001906105789190610be1565b60405160240161058b9493929190610b7f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105f59190610b4d565b600060405180830381855af49150503d8060008114610630576040519150601f19603f3d011682016040523d82523d6000602084013e610635565b606091505b5050905080610670576040517ff09dd32600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50808061067c90610d9b565b9150506102b8565b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461075d576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000813590506107b081610eaf565b92915050565b60008083601f8401126107cc576107cb610e76565b5b8235905067ffffffffffffffff8111156107e9576107e8610e71565b5b60208301915083602082028301111561080557610804610e8a565b5b9250929050565b60008135905061081b81610ec6565b92915050565b60006060828403121561083757610836610e80565b5b6108416060610c6d565b905060006108518482850161080c565b600083015250602061086584828501610885565b602083015250604061087984828501610885565b60408301525092915050565b60008135905061089481610edd565b92915050565b6000602082840312156108b0576108af610e99565b5b60006108be848285016107a1565b91505092915050565b600080602083850312156108de576108dd610e99565b5b600083013567ffffffffffffffff8111156108fc576108fb610e94565b5b610908858286016107b6565b92509250509250929050565b60006060828403121561092a57610929610e99565b5b600061093884828501610821565b91505092915050565b60006020828403121561095757610956610e99565b5b600061096584828501610885565b91505092915050565b61097781610cd5565b82525050565b61098681610cd5565b82525050565b61099581610ce7565b82525050565b6109a481610ce7565b82525050565b60006109b582610c92565b6109bf8185610ca8565b93506109cf818560208601610d37565b80840191505092915050565b60006109e78385610cc4565b93506109f4838584610d28565b6109fd83610e9e565b840190509392505050565b6000610a1382610c9d565b610a1d8185610cb3565b9350610a2d818560208601610d37565b610a3681610e9e565b840191505092915050565b600061012083016000830151610a5a6000860182610b20565b506020830151610a6d602086018261096e565b506040830151610a80604086018261096e565b5060608301518482036060860152610a988282610a08565b9150506080830151610aad6080860182610b20565b5060a0830151610ac060a086018261096e565b5060c0830151610ad360c0860182610ade565b508091505092915050565b606082016000820151610af4600085018261098c565b506020820151610b076020850182610b2f565b506040820151610b1a6040850182610b2f565b50505050565b610b2981610d11565b82525050565b610b3881610d1b565b82525050565b610b4781610d1b565b82525050565b6000610b5982846109aa565b915081905092915050565b6000602082019050610b79600083018461097d565b92915050565b60006060820190508181036000830152610b998187610a41565b9050610ba8602083018661099b565b8181036040830152610bbb8184866109db565b905095945050505050565b6000602082019050610bdb6000830184610b3e565b92915050565b60008083356001602003843603038112610bfe57610bfd610e85565b5b80840192508235915067ffffffffffffffff821115610c2057610c1f610e7b565b5b602083019250600182023603831315610c3c57610c3b610e8f565b5b509250929050565b60008235600161016003833603038112610c6157610c60610e85565b5b80830191505092915050565b6000610c77610c88565b9050610c838282610d6a565b919050565b6000604051905090565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610ce082610cf1565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015610d55578082015181840152602081019050610d3a565b83811115610d64576000848401525b50505050565b610d7382610e9e565b810181811067ffffffffffffffff82111715610d9257610d91610e42565b5b80604052505050565b6000610da682610d11565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd957610dd8610de4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610eb881610cd5565b8114610ec357600080fd5b50565b610ecf81610ce7565b8114610eda57600080fd5b50565b610ee681610d1b565b8114610ef157600080fd5b5056fea2646970667358221220d413f556da09ffa7cd3fe2b85e6536e079493c243b009eac933fe77f63b40e0964736f6c63430008070033";

type BatchCreateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchCreateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchCreate__factory extends ContractFactory {
  constructor(...args: BatchCreateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BatchCreate";
  }

  deploy(
    _lucidBudgeteer: string,
    _lucidTx: string,
    _maxOperations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BatchCreate> {
    return super.deploy(
      _lucidBudgeteer,
      _lucidTx,
      _maxOperations,
      overrides || {}
    ) as Promise<BatchCreate>;
  }
  getDeployTransaction(
    _lucidBudgeteer: string,
    _lucidTx: string,
    _maxOperations: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lucidBudgeteer,
      _lucidTx,
      _maxOperations,
      overrides || {}
    );
  }
  attach(address: string): BatchCreate {
    return super.attach(address) as BatchCreate;
  }
  connect(signer: Signer): BatchCreate__factory {
    return super.connect(signer) as BatchCreate__factory;
  }
  static readonly contractName: "BatchCreate";
  public readonly contractName: "BatchCreate";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchCreateInterface {
    return new utils.Interface(_abi) as BatchCreateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchCreate {
    return new Contract(address, _abi, signerOrProvider) as BatchCreate;
  }
}
