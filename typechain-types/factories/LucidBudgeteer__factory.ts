/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LucidBudgeteer,
  LucidBudgeteerInterface,
} from "../LucidBudgeteer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_lucidTxERC721",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "NotCreditorOrDebtor",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "lucidManager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "lucidTxERC721",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "lucidBudgeteer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blocktime",
        type: "uint256",
      },
    ],
    name: "LucidBudgeteerCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "lucidManager",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "updatedBy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "tag",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blocktime",
        type: "uint256",
      },
    ],
    name: "LucidTagUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "claimAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "creditor",
            type: "address",
          },
          {
            internalType: "address",
            name: "debtor",
            type: "address",
          },
          {
            internalType: "string",
            name: "description",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "dueBy",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "claimToken",
            type: "address",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32",
              },
              {
                internalType: "uint8",
                name: "hashFunction",
                type: "uint8",
              },
              {
                internalType: "uint8",
                name: "size",
                type: "uint8",
              },
            ],
            internalType: "struct Multihash",
            name: "attachment",
            type: "tuple",
          },
        ],
        internalType: "struct LucidBudgeteer.ClaimParams",
        name: "claim",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "lucidTag",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_tokenUri",
        type: "string",
      },
    ],
    name: "createLucidTx",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lucidTxERC721",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "newTag",
        type: "bytes32",
      },
    ],
    name: "updateLucidTag",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200111b3803806200111b83398181016040528101906200003791906200019f565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663ea6616536040518163ffffffff1660e01b815260040160206040518083038186803b158015620000f557600080fd5b505afa1580156200010a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013091906200019f565b73ffffffffffffffffffffffffffffffffffffffff167fec5bfbfd4978c88ce4b40327ba6ceb6a5420bef1d598669a5c77581d3d4fe2af304260405162000179929190620001f3565b60405180910390a3506200027d565b600081519050620001998162000263565b92915050565b600060208284031215620001b857620001b76200025e565b5b6000620001c88482850162000188565b91505092915050565b620001dc8162000220565b82525050565b620001ed8162000254565b82525050565b60006040820190506200020a6000830185620001d1565b620002196020830184620001e2565b9392505050565b60006200022d8262000234565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b6200026e8162000220565b81146200027a57600080fd5b50565b610e8e806200028d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633f3269a314610046578063b0d11b5e14610064578063e94a057214610080575b600080fd5b61004e6100b0565b60405161005b9190610b30565b60405180910390f35b61007e60048036038101906100799190610a1e565b6100d4565b005b61009a60048036038101906100959190610933565b6103b5565b6040516100a79190610c05565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600081905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b815260040161013a9190610c05565b60206040518083038186803b15801561015257600080fd5b505afa158015610166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018a9190610906565b905060008273ffffffffffffffffffffffffffffffffffffffff16635aef2447876040518263ffffffff1660e01b81526004016101c79190610c05565b6101206040518083038186803b1580156101e057600080fd5b505afa1580156101f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021891906109c3565b90508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156102865750806080015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156102c857336040517fda107cfb0000000000000000000000000000000000000000000000000000000081526004016102bf9190610b30565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16868573ffffffffffffffffffffffffffffffffffffffff1663ea6616536040518163ffffffff1660e01b815260040160206040518083038186803b15801561032657600080fd5b505afa15801561033a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035e9190610906565b73ffffffffffffffffffffffffffffffffffffffff167f053f806cb3eb68f901626005b2387784c85b5780caa9465c93cae0eecb37389b88426040516103a5929190610bdc565b60405180910390a4505050505050565b60008460200160208101906103ca91906108d9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610443575084604001602081019061041391906108d9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561048557336040517fda107cfb00000000000000000000000000000000000000000000000000000000815260040161047c9190610b30565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663c92aeec18860200160208101906104dc91906108d9565b8960400160208101906104ef91906108d9565b8a80606001906104ff9190610c20565b8c600001358d608001358e60a001602081019061051c91906108d9565b8f60c0018e8e6040518b63ffffffff1660e01b81526004016105479a99989796959493929190610b4b565b602060405180830381600087803b15801561056157600080fd5b505af1158015610575573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059991906109f1565b90503373ffffffffffffffffffffffffffffffffffffffff16818373ffffffffffffffffffffffffffffffffffffffff1663ea6616536040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f957600080fd5b505afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106319190610906565b73ffffffffffffffffffffffffffffffffffffffff167f053f806cb3eb68f901626005b2387784c85b5780caa9465c93cae0eecb37389b8942604051610678929190610bdc565b60405180910390a48092505050949350505050565b60008135905061069c81610dec565b92915050565b6000815190506106b181610dec565b92915050565b6000813590506106c681610e03565b92915050565b6000815190506106db81610e03565b92915050565b6000815190506106f081610e1a565b92915050565b60008083601f84011261070c5761070b610dae565b5b8235905067ffffffffffffffff81111561072957610728610da9565b5b60208301915083600182028301111561074557610744610dc7565b5b9250929050565b6000610120828403121561076357610762610db8565b5b81905092915050565b6000610120828403121561078357610782610dbd565b5b61078d60e0610c83565b9050600061079d8482850161089a565b60008301525060206107b18482850161089a565b60208301525060406107c5848285016106e1565b60408301525060606107d98482850161089a565b60608301525060806107ed848285016106a2565b60808301525060a0610801848285016106a2565b60a08301525060c061081584828501610821565b60c08301525092915050565b60006060828403121561083757610836610dbd565b5b6108416060610c83565b90506000610851848285016106cc565b6000830152506020610865848285016108c4565b6020830152506040610879848285016108c4565b60408301525092915050565b60008135905061089481610e2a565b92915050565b6000815190506108a981610e2a565b92915050565b6000813590506108be81610e41565b92915050565b6000815190506108d381610e41565b92915050565b6000602082840312156108ef576108ee610dd6565b5b60006108fd8482850161068d565b91505092915050565b60006020828403121561091c5761091b610dd6565b5b600061092a848285016106a2565b91505092915050565b6000806000806060858703121561094d5761094c610dd6565b5b600085013567ffffffffffffffff81111561096b5761096a610dd1565b5b6109778782880161074c565b9450506020610988878288016106b7565b935050604085013567ffffffffffffffff8111156109a9576109a8610dd1565b5b6109b5878288016106f6565b925092505092959194509250565b600061012082840312156109da576109d9610dd6565b5b60006109e88482850161076c565b91505092915050565b600060208284031215610a0757610a06610dd6565b5b6000610a158482850161089a565b91505092915050565b60008060408385031215610a3557610a34610dd6565b5b6000610a4385828601610885565b9250506020610a54858286016106b7565b9150509250929050565b610a6781610ce7565b82525050565b610a7681610cf9565b82525050565b610a8581610cf9565b82525050565b6000610a978385610ca8565b9350610aa4838584610d3a565b610aad83610ddb565b840190509392505050565b60608201610ac96000830183610cb9565b610ad66000850182610a6d565b50610ae46020830183610cd0565b610af16020850182610b21565b50610aff6040830183610cd0565b610b0c6040850182610b21565b50505050565b610b1b81610d23565b82525050565b610b2a81610d2d565b82525050565b6000602082019050610b456000830184610a5e565b92915050565b600061014082019050610b61600083018d610a5e565b610b6e602083018c610a5e565b8181036040830152610b81818a8c610a8b565b9050610b906060830189610b12565b610b9d6080830188610b12565b610baa60a0830187610a5e565b610bb760c0830186610ab8565b818103610120830152610bcb818486610a8b565b90509b9a5050505050505050505050565b6000604082019050610bf16000830185610a7c565b610bfe6020830184610b12565b9392505050565b6000602082019050610c1a6000830184610b12565b92915050565b60008083356001602003843603038112610c3d57610c3c610dc2565b5b80840192508235915067ffffffffffffffff821115610c5f57610c5e610db3565b5b602083019250600182023603831315610c7b57610c7a610dcc565b5b509250929050565b6000610c8d610c9e565b9050610c998282610d49565b919050565b6000604051905090565b600082825260208201905092915050565b6000610cc860208401846106b7565b905092915050565b6000610cdf60208401846108af565b905092915050565b6000610cf282610d03565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b610d5282610ddb565b810181811067ffffffffffffffff82111715610d7157610d70610d7a565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610df581610ce7565b8114610e0057600080fd5b50565b610e0c81610cf9565b8114610e1757600080fd5b50565b60058110610e2757600080fd5b50565b610e3381610d23565b8114610e3e57600080fd5b50565b610e4a81610d2d565b8114610e5557600080fd5b5056fea2646970667358221220e8196b2e53206b9fd2ba0f112ec8a9cfb7f2f395cb773d7c8e97c195751071a564736f6c63430008070033";

type LucidBudgeteerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LucidBudgeteerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LucidBudgeteer__factory extends ContractFactory {
  constructor(...args: LucidBudgeteerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LucidBudgeteer";
  }

  deploy(
    _lucidTxERC721: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LucidBudgeteer> {
    return super.deploy(
      _lucidTxERC721,
      overrides || {}
    ) as Promise<LucidBudgeteer>;
  }
  getDeployTransaction(
    _lucidTxERC721: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_lucidTxERC721, overrides || {});
  }
  attach(address: string): LucidBudgeteer {
    return super.attach(address) as LucidBudgeteer;
  }
  connect(signer: Signer): LucidBudgeteer__factory {
    return super.connect(signer) as LucidBudgeteer__factory;
  }
  static readonly contractName: "LucidBudgeteer";
  public readonly contractName: "LucidBudgeteer";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LucidBudgeteerInterface {
    return new utils.Interface(_abi) as LucidBudgeteerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LucidBudgeteer {
    return new Contract(address, _abi, signerOrProvider) as LucidBudgeteer;
  }
}
