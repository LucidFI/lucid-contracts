/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MultihashStruct = {
  hash: BytesLike;
  hashFunction: BigNumberish;
  size: BigNumberish;
};

export type MultihashStructOutput = [string, number, number] & {
  hash: string;
  hashFunction: number;
  size: number;
};

export declare namespace BatchCreate {
  export type CreateClaimParamsStruct = {
    description: string;
    tokenURI: string;
    creditor: string;
    debtor: string;
    claimAmount: BigNumberish;
    dueBy: BigNumberish;
    claimToken: string;
    tag: BytesLike;
    attachment: MultihashStruct;
  };

  export type CreateClaimParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    MultihashStructOutput
  ] & {
    description: string;
    tokenURI: string;
    creditor: string;
    debtor: string;
    claimAmount: BigNumber;
    dueBy: BigNumber;
    claimToken: string;
    tag: string;
    attachment: MultihashStructOutput;
  };
}

export declare namespace LucidBudgeteer {
  export type ClaimParamsStruct = {
    claimAmount: BigNumberish;
    creditor: string;
    debtor: string;
    description: string;
    dueBy: BigNumberish;
    claimToken: string;
    attachment: MultihashStruct;
  };

  export type ClaimParamsStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    string,
    MultihashStructOutput
  ] & {
    claimAmount: BigNumber;
    creditor: string;
    debtor: string;
    description: string;
    dueBy: BigNumber;
    claimToken: string;
    attachment: MultihashStructOutput;
  };
}

export interface LucidBudgeteerModuleInterface extends utils.Interface {
  contractName: "LucidBudgeteerModule";
  functions: {
    "ERC712_VERSION()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "avatar()": FunctionFragment;
    "batchCreate((string,string,address,address,uint256,uint256,address,bytes32,(bytes32,uint8,uint8))[])": FunctionFragment;
    "batchCreateAddress()": FunctionFragment;
    "createLucidTx((uint256,address,address,string,uint256,address,(bytes32,uint8,uint8)),bytes32,string)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getDomainSeperator()": FunctionFragment;
    "getGuard()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "guard()": FunctionFragment;
    "lucidBudgeteerAddress()": FunctionFragment;
    "lucidTxAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "rejectClaim(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescindClaim(uint256)": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setTarget(address)": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "target()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateLucidTag(uint256,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC712_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchCreate",
    values: [BatchCreate.CreateClaimParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCreateAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLucidTx",
    values: [LucidBudgeteer.ClaimParamsStruct, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeperator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getGuard", values?: undefined): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lucidBudgeteerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lucidTxAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescindClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAvatar", values: [string]): string;
  encodeFunctionData(functionFragment: "setGuard", values: [string]): string;
  encodeFunctionData(functionFragment: "setTarget", values: [string]): string;
  encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLucidTag",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC712_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchCreate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCreateAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLucidTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lucidBudgeteerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lucidTxAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescindClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLucidTag",
    data: BytesLike
  ): Result;

  events: {
    "AvatarSet(address,address)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "LucidBudgeteerModuleDeploy(string,address,address,address)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TargetSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AvatarSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LucidBudgeteerModuleDeploy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
}

export type AvatarSetEvent = TypedEvent<
  [string, string],
  { previousAvatar: string; newAvatar: string }
>;

export type AvatarSetEventFilter = TypedEventFilter<AvatarSetEvent>;

export type ChangedGuardEvent = TypedEvent<[string], { guard: string }>;

export type ChangedGuardEventFilter = TypedEventFilter<ChangedGuardEvent>;

export type LucidBudgeteerModuleDeployEvent = TypedEvent<
  [string, string, string, string],
  { version: string; safe: string; moduleAddress: string; initiator: string }
>;

export type LucidBudgeteerModuleDeployEventFilter =
  TypedEventFilter<LucidBudgeteerModuleDeployEvent>;

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string],
  { userAddress: string; relayerAddress: string; functionSignature: string }
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TargetSetEvent = TypedEvent<
  [string, string],
  { previousTarget: string; newTarget: string }
>;

export type TargetSetEventFilter = TypedEventFilter<TargetSetEvent>;

export interface LucidBudgeteerModule extends BaseContract {
  contractName: "LucidBudgeteerModule";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LucidBudgeteerModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    avatar(overrides?: CallOverrides): Promise<[string]>;

    batchCreate(
      claims: BatchCreate.CreateClaimParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCreateAddress(overrides?: CallOverrides): Promise<[string]>;

    createLucidTx(
      _claim: LucidBudgeteer.ClaimParamsStruct,
      _lucidTag: BytesLike,
      _tokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeperator(overrides?: CallOverrides): Promise<[string]>;

    getGuard(overrides?: CallOverrides): Promise<[string] & { _guard: string }>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    guard(overrides?: CallOverrides): Promise<[string]>;

    lucidBudgeteerAddress(overrides?: CallOverrides): Promise<[string]>;

    lucidTxAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rejectClaim(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescindClaim(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUp(
      initParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    target(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLucidTag(
      _tokenId: BigNumberish,
      _lucidTag: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  avatar(overrides?: CallOverrides): Promise<string>;

  batchCreate(
    claims: BatchCreate.CreateClaimParamsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCreateAddress(overrides?: CallOverrides): Promise<string>;

  createLucidTx(
    _claim: LucidBudgeteer.ClaimParamsStruct,
    _lucidTag: BytesLike,
    _tokenUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeperator(overrides?: CallOverrides): Promise<string>;

  getGuard(overrides?: CallOverrides): Promise<string>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  guard(overrides?: CallOverrides): Promise<string>;

  lucidBudgeteerAddress(overrides?: CallOverrides): Promise<string>;

  lucidTxAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rejectClaim(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescindClaim(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAvatar(
    _avatar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGuard(
    _guard: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTarget(
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUp(
    initParams: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  target(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLucidTag(
    _tokenId: BigNumberish,
    _lucidTag: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    avatar(overrides?: CallOverrides): Promise<string>;

    batchCreate(
      claims: BatchCreate.CreateClaimParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCreateAddress(overrides?: CallOverrides): Promise<string>;

    createLucidTx(
      _claim: LucidBudgeteer.ClaimParamsStruct,
      _lucidTag: BytesLike,
      _tokenUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<string>;

    getGuard(overrides?: CallOverrides): Promise<string>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    guard(overrides?: CallOverrides): Promise<string>;

    lucidBudgeteerAddress(overrides?: CallOverrides): Promise<string>;

    lucidTxAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rejectClaim(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescindClaim(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvatar(_avatar: string, overrides?: CallOverrides): Promise<void>;

    setGuard(_guard: string, overrides?: CallOverrides): Promise<void>;

    setTarget(_target: string, overrides?: CallOverrides): Promise<void>;

    setUp(initParams: BytesLike, overrides?: CallOverrides): Promise<void>;

    target(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLucidTag(
      _tokenId: BigNumberish,
      _lucidTag: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AvatarSet(address,address)"(
      previousAvatar?: string | null,
      newAvatar?: string | null
    ): AvatarSetEventFilter;
    AvatarSet(
      previousAvatar?: string | null,
      newAvatar?: string | null
    ): AvatarSetEventFilter;

    "ChangedGuard(address)"(guard?: null): ChangedGuardEventFilter;
    ChangedGuard(guard?: null): ChangedGuardEventFilter;

    "LucidBudgeteerModuleDeploy(string,address,address,address)"(
      version?: null,
      safe?: string | null,
      moduleAddress?: string | null,
      initiator?: string | null
    ): LucidBudgeteerModuleDeployEventFilter;
    LucidBudgeteerModuleDeploy(
      version?: null,
      safe?: string | null,
      moduleAddress?: string | null,
      initiator?: string | null
    ): LucidBudgeteerModuleDeployEventFilter;

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): MetaTransactionExecutedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TargetSet(address,address)"(
      previousTarget?: string | null,
      newTarget?: string | null
    ): TargetSetEventFilter;
    TargetSet(
      previousTarget?: string | null,
      newTarget?: string | null
    ): TargetSetEventFilter;
  };

  estimateGas: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    avatar(overrides?: CallOverrides): Promise<BigNumber>;

    batchCreate(
      claims: BatchCreate.CreateClaimParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCreateAddress(overrides?: CallOverrides): Promise<BigNumber>;

    createLucidTx(
      _claim: LucidBudgeteer.ClaimParamsStruct,
      _lucidTag: BytesLike,
      _tokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<BigNumber>;

    getGuard(overrides?: CallOverrides): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    guard(overrides?: CallOverrides): Promise<BigNumber>;

    lucidBudgeteerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    lucidTxAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rejectClaim(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescindClaim(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGuard(
      _guard: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTarget(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUp(
      initParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLucidTag(
      _tokenId: BigNumberish,
      _lucidTag: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC712_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchCreate(
      claims: BatchCreate.CreateClaimParamsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCreateAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLucidTx(
      _claim: LucidBudgeteer.ClaimParamsStruct,
      _lucidTag: BytesLike,
      _tokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainSeperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lucidBudgeteerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lucidTxAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectClaim(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescindClaim(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      initParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLucidTag(
      _tokenId: BigNumberish,
      _lucidTag: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
